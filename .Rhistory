label=get.vertex.attribute(ga.net, "name"), label.cex=.75)
str(ga.atts)
ga.atts <- read.table(file = 'attributes.tsv', sep='\t', header = TRUE, quote="\"")
str(ga.atts)
ga.atts$name <- as.character(ga.atts$name)
ga.atts$sex <- as.character(ga.atts$sex)
ga.atts$race <- as.character(ga.atts$race)
ga.atts$position <- as.character(ga.atts$position)
ga.atts$sign <- as.character(ga.atts$sign)
str(ga.atts)
ga.net<-network(ga.mat, vertex.attr=ga.atts, vertex.attrnames=colnames(ga.atts),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
plot(ga.net, vertex.col=c("blue","pink")[1+(get.vertex.attribute(ga.net, "sex")=="F")],
label=get.vertex.attribute(ga.net, "name"), label.cex=.75)
ga.atts <- reshape(ga.atts, varying=list(1:7), direction='long')
ga.mat<-read.table(file = 'sociomat.tsv', sep = '\t', header = TRUE, fill=TRUE, quote="\"")
ga.atts <- read.table(file = 'attributes.tsv', sep='\t', header = TRUE, quote="\"")
ga.atts.colnames <- c('name', 'sex', 'race', 'birthyear', 'position', 'season', 'sign')
ga.atts <- reshape(ga.atts, varying=list(1:7), direction='long')
str(ga.atts)
View(ga.atts)
View(ga.base)
library('RCurl')
library(ergm)
ga.mat<-read.table(file = 'sociomat.tsv', sep = '\t', header = TRUE, fill=TRUE, quote="\"")
ga.atts <- read.table(file = 'attributes.tsv', sep='\t', header = TRUE, quote="\"")
ga.atts <- reshape(ga.atts, varying=list(1:7), direction='long')
View(ga.atts)
ga.net<-network(ga.mat, vertex.attr=ga.atts, vertex.attrnames=colnames(ga.atts),
directed=F, hyper=F, loops=F, multiple=F, bipartite=F)
ga.mat<-read.table(file = 'sociomat.tsv', sep = '\t', header = TRUE, fill=TRUE, quote="\"")
ga.atts <- read.table(file = 'attributes.tsv', sep='\t', header = TRUE, quote="\"")
str(ga.atts)
View(ga.atts)
ga.atts.list <- ga.atts.tolist()
library(PANDA)
install.packages("PANDA")
ga.atts.list <- ga.atts.tolist()
library(dlply)
library(dplyr)
ga.atts.list <- dplyr(ga.atts,.(id),c)
ga.atts.list <- dlply(ga.atts,.(id),c)
library(statnet)
library(ergm)
library(sna)
library(coda)
set.seed(0)
data('florentine')
flomarriage
plot(flomarriage, main="Florentine Marriage", cex.main=0.8)
summary(flomarriage~edges)
flomodel.01 <- ergm(flomarriage~edges)
summary(flomodel.01)
#TRIAD FORMATION
summary(flomarriage~edges+triangle)
flomodel.02 <- ergm(flomarriage~edges+triangle)
summary(flomodel.02)
class(flomodel.02)
names(flomodel.02)
flomodel.02$coef
wealth <- flomarriage %v% 'wealth'
View(flomodel.01)
View(flomarriage)
View(flobusiness)
wealth
summary(wealth)
plot(flomarriage, vertex.cex=wealth/25, main="Florentine marriage by wealth", cex.main=0.8)
install.packages("dnr")
library(statnet)
library(ergm)
library(sna)
library(coda)
data("faux.mesa.high")
mesa <- faux.mesa.high
plot(mesa, vertex.col='Grade')
legend('bottomleft',fill=7:12,lengend=paste('Grade',7:12),cex=0.75)
legend('bottomleft',fill=7:12,lengend=paste('Grade',7:12),cex=0.75)
legend('bottomleft',fill=7:12,legend=paste('Grade',7:12),cex=0.75)
fauxmodel.01 <- ergm(mesa ~edges + nodematch('Grade',diff=T) + nodematch('Race',diff=T))
summary(fauxmodel.01)
table(mesa %v% 'Race')
mixingmatrix(mesa, "Race")
summary(mesa ~edges + nodematch('Grade',diff=T) + nodematch('Race',diff=T))
library(statnet)
library(ergm)
library(sna)
library(coda)
data("samplk")
ls()
plot(samplk3)
summary(samplk3~edges+mutual)
sampmodel.01 <- ergm(samplk3~edges+mutual)
summary(sampmodel.01)
missnet <- network.initialize(10,directed=F)
missnet[1,2] <- missnet[2,7] <- missnet[3,6] <- 1
missnet[4,6] <- missnet[4,9] <- missnet[5,6] <- NA
summary(missnet)
#PLOT MISSING DATA WITH EDGE COLORED RED
tempnet <- missnet
tempnet[4,6] <- tempnet[4,9] <- tempnet[5,6] <- 1
missnetmat <-as.matrix(missnet)
missnetmat[is.na(missnetmat)] <- 2
plot(tempnet,label = network.vertex.names(tempnet),edge.col = missnetmat)
summary(missnet~edges)
summary(ergm(missnet~edges))
missnet_bad <- missnet
missnet_bad[4,6] <- missnet_bad[4,9] <- missnet_bad[5,6] <- 0
summary(missnet_bad)
summary(ergm(missnet_bad~edges))
library(statnet)
library(ergm)
library(sna)
library(coda)
flomodel.03.sim <- simulate(flomodel.03,nsim=10)
<<<<<<< HEAD
data <- read_tsv(sociomat.tvs)
library(tidyr)
library(dplyr)
data <- read_tsv(sociomat.tvs)
library(tidyr)
library(dplyr)
read.table(file = 'sociomat.tsv', sep = '\t', header = TRUE)
library(tidyr)
library(dplyr)
data <- read.table(file = 'sociomat.tsv', sep = '\t', header = TRUE)
View(data)
=======
library(statnet)
KNOKI <-  list(
c(0,1,0,0,1,0,1,0,1,0),
c(1,0,1,1,1,0,1,1,1,0),
c(0,1,0,1,1,1,1,0,0,1),
c(1,1,0,0,1,0,1,0,0,0),
c(1,1,1,1,0,0,1,1,1,1),
c(0,0,1,0,0,0,1,0,1,0),
c(0,1,0,1,1,0,0,0,0,0),
c(1,1,0,1,1,0,1,0,1,0),
c(0,1,0,0,1,0,1,0,0,0),
c(1,1,1,0,1,0,1,0,0,0)
)
KNOKE <-  list(
c(0,0,1,0,1,0,0,1,1,1),
c(0,0,1,0,0,0,0,0,0,0),
c(0,0,0,0,0,0,0,1,0,0),
c(0,1,1,0,0,0,1,1,1,0),
c(0,1,1,0,0,0,0,1,1,0),
c(0,0,0,0,0,0,0,0,0,0),
c(0,1,0,0,0,0,0,1,0,0),
c(0,0,0,0,0,0,0,0,1,1),
c(0,0,1,0,0,0,0,1,0,0),
c(0,0,0,0,0,0,0,0,0,0)
)
View(KNOKE)
library(statnet)
KNOKI <-  matrix(list(
c(0,1,0,0,1,0,1,0,1,0),
c(1,0,1,1,1,0,1,1,1,0),
c(0,1,0,1,1,1,1,0,0,1),
c(1,1,0,0,1,0,1,0,0,0),
c(1,1,1,1,0,0,1,1,1,1),
c(0,0,1,0,0,0,1,0,1,0),
c(0,1,0,1,1,0,0,0,0,0),
c(1,1,0,1,1,0,1,0,1,0),
c(0,1,0,0,1,0,1,0,0,0),
c(1,1,1,0,1,0,1,0,0,0)
))
KNOKE <-  matrix(list(
c(0,0,1,0,1,0,0,1,1,1),
c(0,0,1,0,0,0,0,0,0,0),
c(0,0,0,0,0,0,0,1,0,0),
c(0,1,1,0,0,0,1,1,1,0),
c(0,1,1,0,0,0,0,1,1,0),
c(0,0,0,0,0,0,0,0,0,0),
c(0,1,0,0,0,0,0,1,0,0),
c(0,0,0,0,0,0,0,0,1,1),
c(0,0,1,0,0,0,0,1,0,0),
c(0,0,0,0,0,0,0,0,0,0)
))
View(KNOKE)
library(statnet)
KNOKI <-  matrix(
c(0,1,0,0,1,0,1,0,1,0),
c(1,0,1,1,1,0,1,1,1,0),
c(0,1,0,1,1,1,1,0,0,1),
c(1,1,0,0,1,0,1,0,0,0),
c(1,1,1,1,0,0,1,1,1,1),
c(0,0,1,0,0,0,1,0,1,0),
c(0,1,0,1,1,0,0,0,0,0),
c(1,1,0,1,1,0,1,0,1,0),
c(0,1,0,0,1,0,1,0,0,0),
c(1,1,1,0,1,0,1,0,0,0)
)
KNOKI <-  matrix(
c(0,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0),
nrow=10,
ncol=10,
byrow=T)
View(KNOKI)
dimnames(KNOKI) = list(c(1,2,3,4,5,6,7,8,9,10), c("C","C","E","I","M","W","N","U","W","W"))
View(KNOKI)
KNOKE <-  matrix(
c(0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0),
nrow=10,
ncol=10,
byrow=T)
dimnames(KNOKE) = list(c(1,2,3,4,5,6,7,8,9,10), c("C","C","E","I","M","W","N","U","W","W"))
View(KNOKE)
mean(KNOKI)
mean(KNOKE)
summary(KNOKI)
sd(KNOKI)
sd(KNOKE)
fivnum(KNOKI)
fivenum(KNOKI)
gcor(KNOKI, KNOKE)
network.density(KNOKI)
KNOKI.n <- as.network(KNOKI)
network.density(KNOKI.n)
KNOKE.n <- as.network(KNOKE)
network.density(KNOKe.n)
network.density(KNOKE.n)
KNOK.cor <- qaptest(list(KNOKI, KNOKE), gcor, g1=1, g2=2, reps=1000)
KNOK.cor
plot(KNOL.cor, xlim=c(-0.25, 0.4))
plot(KNOK.cor, xlim=c(-0.25, 0.4))
KNOK.cor <- qaptest(list(KNOKI, KNOKE), gcor, g1=1, g2=2, reps=2000)
KNOK.cor
gcor(KNOKI, KNOKE)
KNOKI.n
summary(KNOKI.n)
summary(KNOKE.n)
KNOK.cor <- qaptest(list(KNOKI, KNOKE), gcor, g1=1, g2=2, reps=2000)
KNOK.cor
plot(summary(KNOKI.n ∼ degree(0:10)), type = “l”, lty = 1, lwd = 2,+ xlab = “Degree”, ylab = ”Count”)R> lines(summary(sim2 ∼ degree(0:10)), lty = 2, lwd = 3)R> legend(“topright”, legend = c(“Observed”, “Simulated”), lwd = 3,+ lty = 1:2)
nl<-netlm(KNOKE.n,           # Dependent variable/network
KNOKI.n, # List the independent variables/networks
reps=2000)
summary(nl)
nl<-netlm(KNOKE.n,           # Dependent variable/network
KNOKI.n, # List the independent variables/networks
reps=10000)
summary(nl)
nlog<-netlogit(KNOKE.n, KNOKI.n,reps=1000)
summary(nlog)
KNOKE.v <- as.vecor(KNOKE.n)
KNOKE.v <- as.vector(KNOKE.n)
KNOKI.v <- as.vector(KNOKI.n)
KNOK.v <- c(KNOKE.v, KNOKI.v)
KNOK.group = factor(rep(letters[1:2], each = 100))
bartlett.test(KNOK.v,KNOK.group)
KNOK.v <- as.vector(c(KNOKE.v, KNOKI.v))
bartlett.test(KNOK.v,KNOK.group)
KNOK.v <- c(KNOKE.v, KNOKI.v)
fit = lm(formula = KNOK.v ~ KNOK.groups)
fit = lm(formula = KNOK.v ~ KNOK.group)
fit = lm(formula = as.vector(KNOK.v) ~ KNOK.group)
fit = lm(formula = KNOK.v ~ KNOK.group)
url <- "http://vlado.fmf.uni-lj.si/pub/networks/data/ucinet/padgett.dat"
tmp <- tempdir()
dest <- paste(sep="", tmp, "/", "padgett.dat")
download.file(url, dest)
l <- readLines(paste(sep="", tmp, "/padgett.dat"))
url2 <- "http://vlado.fmf.uni-lj.si/pub/networks/data/ucinet/padgw.dat"
dest <- paste(sep="", tmp, "/", "padgw.dat")
download.file(url2, dest)
l2 <- readLines(paste(sep="", tmp, "/padgw.dat"))
rowlab <- l[ (grep("^ROW LABELS:", l)+1):(grep("^COLUMN LABELS:", l)-1) ]
collab <- l[ (grep("^COLUMN LABELS:", l)+1):(grep("^LEVEL LABELS:", l)-1) ]
data <- l[ (grep("^DATA:", l)+1):length(l) ]
data <- paste(data, collapse="\n")
tc <- textConnection(data)
mat <- as.matrix(read.table(tc))
close(tc)
mat1 <- mat[1:16,]
mat2 <- mat[17:32,]
colnames(mat1) <- rownames(mat1) <- colnames(mat2) <- rownames(mat2) <- rowlab
library(igraph)
g1 <- g_adj_matrix(mat1, mode="undirected")
g2 <- g_adj_matrix(mat2, mode="undirected")
mlabs <- l2[ (grep("^COLUMN LABELS:", l2)+1):(grep("^DATA", l2)-1) ]
alabs <- l2[ (grep("^ROW LABELS:", l2)+1):(grep("^COLUMN LABELS", l2)-1) ]
data2 <- l2[ (grep("^DATA:", l2)+1):length(l2)]
data2 <- paste(data2, collapse="\n")
tc <- textConnection(data2)
meta <- as.matrix(read.table(tc))
close(tc)
rownames(meta) <- alabs
colnames(meta) <- mlabs
meta <- meta[V(g1)$name,]
g1$name <- "Padgett Frorentine families, business"
g2$name <- "Padgett Frorentine families, marriage"
g1$Author <- g2$Author <- "John Padgett"
g1$Citation <- g2$Citation <- "Kent D. (1978). The rise of the Medici: Faction in Florence, 1426-1434. Oxford: Oxford University Press."
g1$URL <- g2$URL <- "http://vlado.fmf.uni-lj.si/pub/networks/data/ucinet/ucidata.htm"
V(g1)$Wealth <- V(g2)$Wealth <- meta[,1]
V(g1)$Priors <- V(g2)$Priors <- meta[,2]
V(g1)$Ties <- V(g2)$Ties <- meta[,3]
padgett <- list(PADGB=g1, PADGM=g2)
View(mat)
View(mat1)
View(mat2)
View(meta)
View(mat2)
View(meta)
cug.test(KNOKE.n, KNOKI.n)
cug.test(KNOKE.n, KNOKI.n, cmode="size")
cug.test(KNOKE.n, cmode="size")
statnet?
help()
?statnet
install.packages("statnetWeb")
KNOK.cor <- qaptest(list(KNOKI, KNOKE), gcor, g1=1, g2=2, reps=2000)
KNOK.cor
plot(KNOK.cor, xlim=c(-0.25, 0.4))
KNOK.cor <- qaptest(list(KNOKE, KNOKI), gcor, g1=1, g2=2, reps=2000)
KNOK.cor
plot(KNOK.cor, xlim=c(-0.25, 0.4))
nl<-netlm(KNOKE.n,           # Dependent variable/network
KNOKI.n, # List the independent variables/networks
reps=1000)
summary(nl)
nlog<-netlogit(KNOKE.n, KNOKI.n,reps=1000)
summary(nlog)
gcor(KNOKI, KNOKE)
>>>>>>> 16367e44d7d3323af8f3c01925ea75ebda5275b8
library(statnet)
install.packages(c("statnet", "resample", "snowboot", "igraph"))
library(statnet)
# Import the libraries needed to complete this tutorial
pacman::p_load(statnet,dplyr,resample,snowboot,igraph)
# Import the libraries needed to complete this tutorial
pacman::p_load(statnet,dplyr,resample,snowboot,igraph)
# Creation of information and monetry network data. First, a matrix is created, and thereafter names are assigned to the relevant columns before being mapped to a network variable
KNOKI <-  matrix(
c(0,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0),
nrow=10,
ncol=10,
byrow=T)
dimnames(KNOKI) = list(c(1,2,3,4,5,6,7,8,9,10), c("C","C","E","I","M","W","N","U","W","W"))
KNOKE <-  matrix(
c(0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0),
nrow=10,
ncol=10,
byrow=T)
dimnames(KNOKE) = list(c(1,2,3,4,5,6,7,8,9,10), c("C","C","E","I","M","W","N","U","W","W"))
KNOKI.n <- as.network(KNOKI)
KNOKE.n <- as.network(KNOKE)
KNOKI.n <- as.network(KNOKI)
KNOKE.n <- as.network(KNOKE)
plot(KNOKI.n)
KNOKI.n <- as.network(KNOKI)
KNOKE.n <- as.network(KNOKE)
KNOKI.n
KNOKI.n <- as.network(KNOKI)
KNOKE.n <- as.network(KNOKE)
KNOKI
#Display the matrices
KNOKI #information
KNOKE #money
#Below, we have created networks from the matrices
KNOKI.n <- as.network(KNOKI)
KNOKE.n <- as.network(KNOKE)
#Display the matrices
print("Matrix #1: KNOKI")
KNOKI #information
print("Matrix #2: KNOKE")
KNOKE #money
#Below, we have created networks from the matrices
KNOKI.n <- as.network(KNOKI)
KNOKE.n <- as.network(KNOKE)
KNOKE
# Remove diagonal because it throws off any matrix calculations
KNOKI.m <- diag.remove(as.sociomatrix(KNOKI.n))
KNOKE.m <- diag.remove(as.sociomatrix(KNOKE.n))
# Summary run to gain a better insight of the matrix
summary(KNOKE.m)
# Summary run to gain a better insight of the matrix
summary(KNOKE.n)
#Univariate descriptive statistics for Knoke information network rows
print("Descriptive Statistics: KNOKE rows")
mat <- t(data_frame(
mean = round(apply(KNOKI.m, 1, mean, na.rm = T),3),
stdev = round(apply(KNOKI.m, 1, sd, na.rm = T),3),
sum = round(apply(KNOKI.m, 1, sum, na.rm = T),3),
var = round(apply(KNOKI.m, 1, var, na.rm = T),3),
min = round(apply(KNOKI.m, 1, min, na.rm = T),3),
max = round(apply(KNOKI.m, 1, max, na.rm = T),3)
)) %>% data.frame()
colnames(mat) <- colnames(KNOKI.m)
mat
#Univariate descriptive statistics for Knoke information network columns
mat <- t(data_frame(
mean = round(apply(KNOKI.m, 2, mean, na.rm = T),3),
stdev = round(apply(KNOKI.m, 2, sd, na.rm = T),3),
sum = round(apply(KNOKI.m, 2, sum, na.rm = T),3),
var = round(apply(KNOKI.m, 2, var, na.rm = T),3),
min = round(apply(KNOKI.m, 2, min, na.rm = T),3),
max = round(apply(KNOKI.m, 2, max, na.rm = T),3)
)) %>% data.frame()
colnames(mat) <- colnames(KNOKI.m)
mat
# In this instance, Binary Networks use density for a degree of central tendency. When creating predicitions of network densities, creating the hypothesus around an expected density is necessary and then to measure vairation around the expected and actual density
network.density(KNOKI.n)
# In this instance, Binary Networks use density for a degree of central tendency. When creating predicitions of network densities, creating the hypothesus around an expected density is necessary and then to measure vairation around the expected and actual density
summary(KNOKI.n)
#If one wanted to pbtain only the network density however, use the following
print(Network Density = `network.density(KNOKI.n)`)
# In this instance, Binary Networks use density for a degree of central tendency. When creating predicitions of network densities, creating the hypothesus around an expected density is necessary and then to measure vairation around the expected and actual density
summary(KNOKI.n)
#If one wanted to pbtain only the network density however, use the following
print("Network Density = ", network.density(KNOKI.n))
# In this instance, Binary Networks use density for a degree of central tendency. When creating predicitions of network densities, creating the hypothesus around an expected density is necessary and then to measure vairation around the expected and actual density
summary(KNOKI.n)
#If one wanted to pbtain only the network density however, use the following
network.density(KNOKI.n)
# In order to produce a sample distribution of density measures, we use bootstrapping to recreate sample networks and thereafter re-calcukate density
set.seed(1)
B <- 500
KNOKI.boot <- vertboot(KNOKI, B)
densities <- sapply(1:B, function(x)
graph.density(graph_from_adjacency_matrix(KNOKI.boot[[x]])))
mean(densities)
# In order to produce a sample distribution of density measures, we use bootstrapping to recreate sample networks and thereafter re-calcukate density
set.seed(1)
B <- 500
KNOKI.boot <- vertboot(KNOKI, B)
densities <- sapply(1:B, function(x)
graph.density(graph_from_adjacency_matrix(KNOKI.boot[[x]])))
# In order to produce a sample distribution of density measures, we use bootstrapping to recreate sample networks and thereafter re-calcukate density
set.seed(1)
B <- 500
KNOKI.boot <- vertboot(KNOKI, B)
densities <- sapply(1:B, function(x)
graph.density(graph_from_adjacency_matrix(KNOKI.boot[[x]])))
densities
# In order to produce a sample distribution of density measures, we use bootstrapping to recreate sample networks and thereafter re-calcukate density
set.seed(1)
B <- 500
KNOKI.boot <- vertboot(KNOKI, B)
densities <- sapply(1:B, function(x)
graph.density(graph_from_adjacency_matrix(KNOKI.boot[[x]])))
mean(densities)
# In order to produce a sample distribution of density measures, we use bootstrapping to recreate sample networks and thereafter re-calcukate density
set.seed(1)
B <- 500
KNOKI.boot <- vertboot(KNOKI, B)
densities <- sapply(1:B, function(x)
graph.density(graph_from_adjacency_matrix(KNOKI.boot[[x]])))
mean(densities)
# Correlating both networks
gcor(list(KNOKE, KNOKI))
# Here, a quadratic assignment procedure (QAP) hypothesis test is performed. In a qaptest, an arbitrary graph-level statistic(computed on the first argument, by the second) is tested against a qap null hypothesis
(KNOK.cor <- qaptest(list(KNOKE, KNOKI), gcor, g1=1, g2=2, reps=2000))
# Plotting QAP correlated networks
plot(KNOK.cor, xlim=c(-0.25, 0.4))
# Performance of Standard Multiple Regression Analysis
nl<-netlm(KNOKE.n, KNOKI.n, reps=1000)
summary(nl)
# QAP Logistic Regression
nlog<-netlogit(KNOKE.n, KNOKI.n,reps=1000)
summary(nlog)
summary(KNOK.cor)
# In order to produce a sample distribution of density measures, we use bootstrapping to recreate sample networks and thereafter re-calcukate density
set.seed(1)
B <- 5000
KNOKI.boot <- vertboot(KNOKI, B)
densities <- sapply(1:B, function(x)
graph.density(graph_from_adjacency_matrix(KNOKI.boot[[x]])))
mean(densities)
KNOKI.boot
# In order to produce a sample distribution of density measures, we use bootstrapping to recreate sample networks and thereafter re-calcukate density
set.seed(1)
B <- 5000
KNOKI.boot <- vertboot(KNOKI, B)
densities <- sapply(1:B, function(x)
graph.density(graph_from_adjacency_matrix(KNOKI.boot[[x]])))
mean(densities)
### NOT GETTING THE RIGHT OUTPUT HERE, CHECK CATHS CODE ###
# Both compared to randomly generated matrices
set.seed(1)
B <- 5000
both.boot <- vertboot(KNOKI, KONKE, B)
# Both compared to randomly generated matrices
both.ttest <- t.test(KNOKI, KNOKE, paired = TRUE)
both.ttest
### NOT GETTING THE RIGHT OUTPUT HERE, CHECK CATHS CODE ###
# In order to produce a sample distribution of density measures, we use bootstrapping to recreate sample networks and thereafter re-calcukate density
set.seed(1)
B <- 5000
KNOKI.boot <- vertboot(KNOKI, B)
densities <- sapply(1:B, function(x)
graph.density(graph_from_adjacency_matrix(KNOKI.boot[[x]])))
mean(densities)
### NOT GETTING THE RIGHT OUTPUT HERE, CHECK CATHS CODE ###
#Maybe this?
t.test(KNOKI)
# Creating a network coding each element as "1" if both are private or both are non-private, and a "0" if they are of mixed types
KNOKP.n <-  matrix(
c(0,1,0,1,0,0,0,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,0),
nrow=10,
ncol=10,
byrow=T)
dimnames(KNOKP.n) = list(c(1,2,3,4,5,6,7,8,9,10), c("C","C","E","I","M","W","N","U","W","W"))
KNOKP.n
# QAP Logistic Regression
nlog<-netlogit(KNOKE.m, KNOKI.m,reps=1000)
summary(nlog)
#Performance of Standard Multiple Regression analysis by regressing each element in the network on its corresponding elements in the information network
nl_p<-netlm(KNOKI.n, KNOKE.n, KNOKP.n, reps=1000)
#Performance of Standard Multiple Regression analysis by regressing each element in the network on its corresponding elements in the information network
nl_p<-netlm(KNOKI.n, list(KNOKE.n, KNOKP.n), reps=1000)
summary(nl_p)
